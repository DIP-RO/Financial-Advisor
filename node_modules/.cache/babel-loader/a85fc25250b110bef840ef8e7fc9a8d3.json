{"ast":null,"code":"import _objectSpread from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs'; // CLASS\n\nvar MutationObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationObserver, _Subscribable);\n\n  var _super = _createSuper(MutationObserver);\n\n  function MutationObserver(client, options) {\n    var _this;\n\n    _classCallCheck(this, MutationObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n\n    _this.setOptions(options);\n\n    _this.bindMethods();\n\n    _this.updateResult();\n\n    return _this;\n  }\n\n  _createClass(MutationObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.mutate = this.mutate.bind(this);\n      this.reset = this.reset.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var prevOptions = this.options;\n      this.options = this.client.defaultMutationOptions(options);\n\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getMutationCache().notify({\n          type: 'observerOptionsUpdated',\n          mutation: this.currentMutation,\n          observer: this\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        var _this$currentMutation;\n\n        (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n      }\n    }\n  }, {\n    key: \"onMutationUpdate\",\n    value: function onMutationUpdate(action) {\n      this.updateResult(); // Determine which callbacks to trigger\n\n      var notifyOptions = {\n        listeners: true\n      };\n\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = true;\n      } else if (action.type === 'error') {\n        notifyOptions.onError = true;\n      }\n\n      this.notify(notifyOptions);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.currentMutation = undefined;\n      this.updateResult();\n      this.notify({\n        listeners: true\n      });\n    }\n  }, {\n    key: \"mutate\",\n    value: function mutate(variables, options) {\n      this.mutateOptions = options;\n\n      if (this.currentMutation) {\n        this.currentMutation.removeObserver(this);\n      }\n\n      this.currentMutation = this.client.getMutationCache().build(this.client, _objectSpread(_objectSpread({}, this.options), {}, {\n        variables: typeof variables !== 'undefined' ? variables : this.options.variables\n      }));\n      this.currentMutation.addObserver(this);\n      return this.currentMutation.execute();\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult() {\n      var state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n\n      var result = _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: state.status === 'loading',\n        isSuccess: state.status === 'success',\n        isError: state.status === 'error',\n        isIdle: state.status === 'idle',\n        mutate: this.mutate,\n        reset: this.reset\n      });\n\n      this.currentResult = result;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(options) {\n      var _this2 = this;\n\n      notifyManager.batch(function () {\n        // First trigger the mutate callbacks\n        if (_this2.mutateOptions) {\n          if (options.onSuccess) {\n            var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n            (_this$mutateOptions$o = (_this$mutateOptions = _this2.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, _this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o2 = (_this$mutateOptions2 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, _this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);\n          } else if (options.onError) {\n            var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n            (_this$mutateOptions$o3 = (_this$mutateOptions3 = _this2.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o4 = (_this$mutateOptions4 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n          }\n        } // Then trigger the listeners\n\n\n        if (options.listeners) {\n          _this2.listeners.forEach(function (listener) {\n            listener(_this2.currentResult);\n          });\n        }\n      });\n    }\n  }]);\n\n  return MutationObserver;\n}(Subscribable);\n\nexport { MutationObserver };","map":{"version":3,"mappings":"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","names":["MutationObserver","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","listeners","length","removeObserver","onMutationUpdate","action","notifyOptions","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","data","context","onSettled","_this$mutateOptions$o3","error","forEach","listener","Subscribable"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\mutationObserver.ts"],"sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}