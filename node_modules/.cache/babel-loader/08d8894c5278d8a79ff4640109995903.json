{"ast":null,"code":"import _objectSpread from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"refetchPage\"];\nimport { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nvar QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n\n  var _super = _createSuper(QueryObserver);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _classCallCheck(this, QueryObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = new Set();\n    _this.selectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.remove = this.remove.bind(this);\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.length === 1) {\n        this.currentQuery.addObserver(this);\n\n        if (shouldFetchOnMount(this.currentQuery, this.options)) {\n          this.executeFetch();\n        }\n\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.clearStaleTimeout();\n      this.clearRefetchInterval();\n      this.currentQuery.removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = this.currentQuery;\n      this.options = this.client.defaultQueryOptions(options);\n\n      if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n        this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n      }\n\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getQueryCache().notify({\n          type: 'observerOptionsUpdated',\n          query: this.currentQuery,\n          observer: this\n        });\n      }\n\n      if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n        throw new Error('Expected enabled to be a boolean');\n      } // Keep previous query key if the user does not supply one\n\n\n      if (!this.options.queryKey) {\n        this.options.queryKey = prevOptions.queryKey;\n      }\n\n      this.updateQuery();\n      var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n      if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n        this.executeFetch();\n      } // Update result\n\n\n      this.updateResult(notifyOptions); // Update stale interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n        this.updateStaleTimeout();\n      }\n\n      var nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n      if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n        this.updateRefetchInterval(nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = this.client.getQueryCache().build(this.client, options);\n      return this.createResult(query, options);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result) {\n      var _this2 = this;\n\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _this2.trackedProps.add(key);\n\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return this.currentQuery;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.client.getQueryCache().remove(this.currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          refetchPage = _ref.refetchPage,\n          options = _objectWithoutProperties(_ref, _excluded);\n\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          refetchPage: refetchPage\n        }\n      }));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n\n      var defaultedOptions = this.client.defaultQueryOptions(options);\n      var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _this4 = this;\n\n      var _fetchOptions$cancelR;\n\n      return this.executeFetch(_objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n\n        return _this4.currentResult;\n      });\n    }\n  }, {\n    key: \"executeFetch\",\n    value: function executeFetch(fetchOptions) {\n      // Make sure we reference the latest query as the current one might have been removed\n      this.updateQuery(); // Fetch\n\n      var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n      if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n        promise = promise.catch(noop);\n      }\n\n      return promise;\n    }\n  }, {\n    key: \"updateStaleTimeout\",\n    value: function updateStaleTimeout() {\n      var _this5 = this;\n\n      this.clearStaleTimeout();\n\n      if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n        return;\n      }\n\n      var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n      // To mitigate this issue we always add 1 ms to the timeout.\n\n      var timeout = time + 1;\n      this.staleTimeoutId = setTimeout(function () {\n        if (!_this5.currentResult.isStale) {\n          _this5.updateResult();\n        }\n      }, timeout);\n    }\n  }, {\n    key: \"computeRefetchInterval\",\n    value: function computeRefetchInterval() {\n      var _this$options$refetch;\n\n      return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n  }, {\n    key: \"updateRefetchInterval\",\n    value: function updateRefetchInterval(nextInterval) {\n      var _this6 = this;\n\n      this.clearRefetchInterval();\n      this.currentRefetchInterval = nextInterval;\n\n      if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n        return;\n      }\n\n      this.refetchIntervalId = setInterval(function () {\n        if (_this6.options.refetchIntervalInBackground || focusManager.isFocused()) {\n          _this6.executeFetch();\n        }\n      }, this.currentRefetchInterval);\n    }\n  }, {\n    key: \"updateTimers\",\n    value: function updateTimers() {\n      this.updateStaleTimeout();\n      this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n  }, {\n    key: \"clearStaleTimeout\",\n    value: function clearStaleTimeout() {\n      if (this.staleTimeoutId) {\n        clearTimeout(this.staleTimeoutId);\n        this.staleTimeoutId = undefined;\n      }\n    }\n  }, {\n    key: \"clearRefetchInterval\",\n    value: function clearRefetchInterval() {\n      if (this.refetchIntervalId) {\n        clearInterval(this.refetchIntervalId);\n        this.refetchIntervalId = undefined;\n      }\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = this.currentQuery;\n      var prevOptions = this.options;\n      var prevResult = this.currentResult;\n      var prevResultState = this.currentResultState;\n      var prevResultOptions = this.currentResultOptions;\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n      var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n      var state = query.state;\n      var dataUpdatedAt = state.dataUpdatedAt,\n          error = state.error,\n          errorUpdatedAt = state.errorUpdatedAt,\n          fetchStatus = state.fetchStatus,\n          status = state.status;\n      var isPreviousData = false;\n      var isPlaceholderData = false;\n      var data; // Optimistically set result in fetching state if needed\n\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n        if (fetchOnMount || fetchOptionally) {\n          fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n          if (!dataUpdatedAt) {\n            status = 'loading';\n          }\n        }\n\n        if (options._optimisticResults === 'isRestoring') {\n          fetchStatus = 'idle';\n        }\n      } // Keep previous data if needed\n\n\n      if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n        data = prevQueryResult.data;\n        dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n        status = prevQueryResult.status;\n        isPreviousData = true;\n      } // Select data if needed\n      else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n          data = this.selectResult;\n        } else {\n          try {\n            this.selectFn = options.select;\n            data = options.select(state.data);\n            data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n            this.selectResult = data;\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      } // Use query data\n      else {\n        data = state.data;\n      } // Show placeholder data if needed\n\n\n      if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n        var placeholderData; // Memoize placeholder data\n\n        if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n          if (options.select && typeof placeholderData !== 'undefined') {\n            try {\n              placeholderData = options.select(placeholderData);\n              this.selectError = null;\n            } catch (selectError) {\n              if (process.env.NODE_ENV !== 'production') {\n                this.client.getLogger().error(selectError);\n              }\n\n              this.selectError = selectError;\n            }\n          }\n        }\n\n        if (typeof placeholderData !== 'undefined') {\n          status = 'success';\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n\n      if (this.selectError) {\n        error = this.selectError;\n        data = this.selectResult;\n        errorUpdatedAt = Date.now();\n        status = 'error';\n      }\n\n      var isFetching = fetchStatus === 'fetching';\n      var isLoading = status === 'loading';\n      var isError = status === 'error';\n      var result = {\n        status: status,\n        fetchStatus: fetchStatus,\n        isLoading: isLoading,\n        isSuccess: status === 'success',\n        isError: isError,\n        isInitialLoading: isLoading && isFetching,\n        data: data,\n        dataUpdatedAt: dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: state.fetchFailureCount,\n        failureReason: state.fetchFailureReason,\n        errorUpdateCount: state.errorUpdateCount,\n        isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n        isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isLoading,\n        isLoadingError: isError && state.dataUpdatedAt === 0,\n        isPaused: fetchStatus === 'paused',\n        isPlaceholderData: isPlaceholderData,\n        isPreviousData: isPreviousData,\n        isRefetchError: isError && state.dataUpdatedAt !== 0,\n        isStale: isStale(query, options),\n        refetch: this.refetch,\n        remove: this.remove\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this7 = this;\n\n      var prevResult = this.currentResult;\n      var nextResult = this.createResult(this.currentQuery, this.options);\n      this.currentResultState = this.currentQuery.state;\n      this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n\n      this.currentResult = nextResult; // Determine which callbacks to trigger\n\n      var defaultNotifyOptions = {\n        cache: true\n      };\n\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n\n        var notifyOnChangeProps = _this7.options.notifyOnChangeProps;\n\n        if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !_this7.trackedProps.size) {\n          return true;\n        }\n\n        var includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : _this7.trackedProps);\n\n        if (_this7.options.useErrorBoundary) {\n          includedProps.add('error');\n        }\n\n        return Object.keys(_this7.currentResult).some(function (key) {\n          var typedKey = key;\n          var changed = _this7.currentResult[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n\n      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n\n      this.notify(_objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery() {\n      var query = this.client.getQueryCache().build(this.client, this.options);\n\n      if (query === this.currentQuery) {\n        return;\n      }\n\n      var prevQuery = this.currentQuery;\n      this.currentQuery = query;\n      this.currentQueryInitialState = query.state;\n      this.previousQueryResult = this.currentResult;\n\n      if (this.hasListeners()) {\n        prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n        query.addObserver(this);\n      }\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate(action) {\n      var notifyOptions = {};\n\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = !action.manual;\n      } else if (action.type === 'error' && !isCancelledError(action.error)) {\n        notifyOptions.onError = true;\n      }\n\n      this.updateResult(notifyOptions);\n\n      if (this.hasListeners()) {\n        this.updateTimers();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(notifyOptions) {\n      var _this8 = this;\n\n      notifyManager.batch(function () {\n        // First trigger the configuration callbacks\n        if (notifyOptions.onSuccess) {\n          var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n          (_this$options$onSucce = (_this$options = _this8.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, _this8.currentResult.data);\n          (_this$options$onSettl = (_this$options2 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, _this8.currentResult.data, null);\n        } else if (notifyOptions.onError) {\n          var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n          (_this$options$onError = (_this$options3 = _this8.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, _this8.currentResult.error);\n          (_this$options$onSettl2 = (_this$options4 = _this8.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, _this8.currentResult.error);\n        } // Then trigger the listeners\n\n\n        if (notifyOptions.listeners) {\n          _this8.listeners.forEach(function (listener) {\n            listener(_this8.currentResult);\n          });\n        } // Then the cache listeners\n\n\n        if (notifyOptions.cache) {\n          _this8.client.getQueryCache().notify({\n            query: _this8.currentQuery,\n            type: 'observerResultsUpdated'\n          });\n        }\n      });\n    }\n  }]);\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    var value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nexport { QueryObserver };","map":{"version":3,"mappings":"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","names":["QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","_fetchOptions$cancelR","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","refetchInterval","data","_this$options$refetch","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","onSettled","listener","Subscribable","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n"]},"metadata":{},"sourceType":"module"}