{"ast":null,"code":"import _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isValidTimeout, isServer } from './utils.mjs';\n\nvar Removable = /*#__PURE__*/function () {\n  function Removable() {\n    _classCallCheck(this, Removable);\n  }\n\n  _createClass(Removable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearGcTimeout();\n    }\n  }, {\n    key: \"scheduleGc\",\n    value: function scheduleGc() {\n      var _this = this;\n\n      this.clearGcTimeout();\n\n      if (isValidTimeout(this.cacheTime)) {\n        this.gcTimeout = setTimeout(function () {\n          _this.optionalRemove();\n        }, this.cacheTime);\n      }\n    }\n  }, {\n    key: \"updateCacheTime\",\n    value: function updateCacheTime(newCacheTime) {\n      // Default to 5 minutes (Infinity for server-side) if no cache time is set\n      this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n    }\n  }, {\n    key: \"clearGcTimeout\",\n    value: function clearGcTimeout() {\n      if (this.gcTimeout) {\n        clearTimeout(this.gcTimeout);\n        this.gcTimeout = undefined;\n      }\n    }\n  }]);\n\n  return Removable;\n}();\n\nexport { Removable };","map":{"version":3,"mappings":";;;;IAEsBA,S;;;;;;;WAIpBC,mBAAgB;MACd,KAAKC,cAAL;IACD;;;WAESC,sBAAmB;MAAA;;MAC3B,KAAKD,cAAL;;MAEA,IAAIE,cAAc,CAAC,KAAKC,SAAN,CAAlB,EAAoC;QAClC,KAAKC,SAAL,GAAiBC,UAAU,CAAC,YAAM;UAChC,MAAKC,cAAL;QADyB,GAExB,KAAKH,SAFmB,CAA3B;MAGD;IACF;;;WAESI,yBAAgBC,YAAhBD,EAAwD;MAChE;MACA,KAAKJ,SAAL,GAAiBM,IAAI,CAACC,GAALD,CACf,KAAKN,SAAL,IAAkB,CADHM,EAEfD,YAFe,IAEfA,sBAAiBG,QAAQ,GAAGC,QAAH,GAAc,IAAI,EAAJ,GAAS,IAFjCH,CAAjB;IAID;;;WAEST,0BAAiB;MACzB,IAAI,KAAKI,SAAT,EAAoB;QAClBS,YAAY,CAAC,KAAKT,SAAN,CAAZS;QACA,KAAKT,SAAL,GAAiBU,SAAjB;MACD;IACF","names":["Removable","destroy","clearGcTimeout","scheduleGc","isValidTimeout","cacheTime","gcTimeout","setTimeout","optionalRemove","updateCacheTime","newCacheTime","Math","max","isServer","Infinity","clearTimeout","undefined"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\removable.ts"],"sourcesContent":["import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n"]},"metadata":{},"sourceType":"module"}