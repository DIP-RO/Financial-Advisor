{"ast":null,"code":"import _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nvar QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n\n  var _super = _createSuper(QueriesObserver);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _classCallCheck(this, QueriesObserver);\n\n    _this = _super.call(this);\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n\n      if (this.listeners.length === 1) {\n        this.observers.forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this2.onUpdate(observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.observers.forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, notifyOptions) {\n      var _this3 = this;\n\n      this.queries = queries;\n      notifyManager.batch(function () {\n        var prevObservers = _this3.observers;\n\n        var newObserverMatches = _this3.findMatchingObservers(_this3.queries); // set options for the new observers to notify of changes\n\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n          return [observer.options.queryHash, observer];\n        }));\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n\n        _this3.observers = newObservers;\n        _this3.observersMap = newObserversMap;\n        _this3.result = newResult;\n\n        if (!_this3.hasListeners()) {\n          return;\n        }\n\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this3.onUpdate(observer, result);\n          });\n        });\n\n        _this3.notify();\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.result;\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return this.observers.map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return this.observers;\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      return this.findMatchingObservers(queries).map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n    }\n  }, {\n    key: \"findMatchingObservers\",\n    value: function findMatchingObservers(queries) {\n      var _this4 = this;\n\n      var prevObservers = this.observers;\n      var defaultedQueryOptions = queries.map(function (options) {\n        return _this4.client.defaultQueryOptions(options);\n      });\n      var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n        var match = prevObservers.find(function (observer) {\n          return observer.options.queryHash === defaultedOptions.queryHash;\n        });\n\n        if (match != null) {\n          return [{\n            defaultedQueryOptions: defaultedOptions,\n            observer: match\n          }];\n        }\n\n        return [];\n      });\n      var matchedQueryHashes = matchingObservers.map(function (match) {\n        return match.defaultedQueryOptions.queryHash;\n      });\n      var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n        return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n      });\n      var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n        return !matchingObservers.some(function (match) {\n          return match.observer === prevObserver;\n        });\n      });\n\n      var getObserver = function getObserver(options) {\n        var defaultedOptions = _this4.client.defaultQueryOptions(options);\n\n        var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n        return currentObserver != null ? currentObserver : new QueryObserver(_this4.client, defaultedOptions);\n      };\n\n      var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          var previouslyUsedObserver = unmatchedObservers[index];\n\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver\n            };\n          }\n        }\n\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options)\n        };\n      });\n\n      var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n        return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n      };\n\n      return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(observer, result) {\n      var index = this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        this.result = replaceAt(this.result, index, result);\n        this.notify();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.listeners.forEach(function (listener) {\n          listener(_this5.result);\n        });\n      });\n    }\n  }]);\n\n  return QueriesObserver;\n}(Subscribable);\n\nexport { QueriesObserver };","map":{"version":3,"mappings":"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","names":["QueriesObserver","constructor","client","queries","result","observers","observersMap","setQueries","onSubscribe","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","find","matchedQueryHashes","unmatchedQueries","filter","includes","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","replaceAt","listener","Subscribable"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}