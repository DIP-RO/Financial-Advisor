{"ast":null,"code":"import _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nvar OnlineManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(OnlineManager, _Subscribable);\n\n  var _super = _createSuper(OnlineManager);\n\n  function OnlineManager() {\n    var _this;\n\n    _classCallCheck(this, OnlineManager);\n\n    _this = _super.call(this);\n\n    _this.setup = function (onOnline) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onOnline();\n        }; // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n\n      return;\n    };\n\n    return _this;\n  }\n\n  _createClass(OnlineManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n\n      var _this$cleanup2;\n\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (online) {\n        if (typeof online === 'boolean') {\n          _this2.setOnline(online);\n        } else {\n          _this2.onOnline();\n        }\n      });\n    }\n  }, {\n    key: \"setOnline\",\n    value: function setOnline(online) {\n      this.online = online;\n\n      if (online) {\n        this.onOnline();\n      }\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      this.listeners.forEach(function (listener) {\n        listener();\n      });\n    }\n  }, {\n    key: \"isOnline\",\n    value: function isOnline() {\n      if (typeof this.online === 'boolean') {\n        return this.online;\n      }\n\n      if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n        return true;\n      }\n\n      return navigator.onLine;\n    }\n  }]);\n\n  return OnlineManager;\n}(Subscribable);\n\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";;;;;;;IAOaA,a;;;;;EAMXC,yBAAc;IAAA;;IAAA;;IACZ;;IACA,MAAKC,KAAL,GAAcC,kBAAD,EAAc;MACzB;MACA;MACA,IAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;QACxC,IAAMC,QAAQ,GAAG,SAAXA,QAAW;UAAA,OAAMJ,QAAQ,EAAd;QAAA,CAAjB,CADwC;;;QAGxCE,MAAM,CAACC,gBAAPD,CAAwB,QAAxBA,EAAkCE,QAAlCF,EAA4C,KAA5CA;QACAA,MAAM,CAACC,gBAAPD,CAAwB,SAAxBA,EAAmCE,QAAnCF,EAA6C,KAA7CA;QAEA,OAAO,YAAM;UACX;UACAA,MAAM,CAACG,mBAAPH,CAA2B,QAA3BA,EAAqCE,QAArCF;UACAA,MAAM,CAACG,mBAAPH,CAA2B,SAA3BA,EAAsCE,QAAtCF;QAHF;MAKD;;MAED;IAhBF;;IAFY;EAoBb;;;;WAESI,uBAAoB;MAC5B,IAAI,CAAC,KAAKC,OAAV,EAAmB;QACjB,KAAKC,gBAAL,CAAsB,KAAKT,KAA3B;MACD;IACF;;;WAESU,yBAAgB;MACxB,IAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;QAAA;;QACxB,sBAAKH,OAAL;QACA,KAAKA,OAAL,GAAeI,SAAf;MACD;IACF;;;WAEDH,0BAAiBT,KAAjBS,EAAuC;MAAA;;MAAA;;MACrC,KAAKT,KAAL,GAAaA,KAAb;MACA,uBAAKQ,OAAL;MACA,KAAKA,OAAL,GAAeR,KAAK,CAAEa,gBAAD,EAAsB;QACzC,IAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;UAC/B,MAAKC,UAAL,CAAeD,MAAf;QADF,OAEO;UACL,OAAKZ,QAAL;QACD;MALiB,EAApB;IAOD;;;WAEDa,mBAAUD,MAAVC,EAAkC;MAChC,KAAKD,MAAL,GAAcA,MAAd;;MAEA,IAAIA,MAAJ,EAAY;QACV,KAAKZ,QAAL;MACD;IACF;;;WAEDA,oBAAiB;MACf,KAAKc,SAAL,CAAeC,OAAf,CAAwBX,kBAAD,EAAc;QACnCA,QAAQ;MADV;IAGD;;;WAEDY,oBAAoB;MAClB,IAAI,OAAO,KAAKJ,MAAZ,KAAuB,SAA3B,EAAsC;QACpC,OAAO,KAAKA,MAAZ;MACD;;MAED,IACE,OAAOK,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;QACA,OAAO,IAAP;MACD;;MAED,OAAOD,SAAS,CAACC,MAAjB;IACD;;;;EAhFgCC,Y;;AAmFtBC,iBAAa,GAAG,IAAIvB,aAAJ,EAAhBuB","names":["OnlineManager","constructor","setup","onOnline","isServer","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","listeners","forEach","isOnline","navigator","onLine","Subscribable","onlineManager"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}