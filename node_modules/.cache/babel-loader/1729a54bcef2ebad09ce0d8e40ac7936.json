{"ast":null,"code":"import _slicedToArray from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { parseMutationFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\n\nfunction useIsMutating(arg1, arg2, arg3) {\n  var _parseMutationFilterA = parseMutationFilterArgs(arg1, arg2, arg3),\n      _parseMutationFilterA2 = _slicedToArray(_parseMutationFilterA, 2),\n      filters = _parseMutationFilterA2[0],\n      _parseMutationFilterA3 = _parseMutationFilterA2[1],\n      options = _parseMutationFilterA3 === void 0 ? {} : _parseMutationFilterA3;\n\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return mutationCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [mutationCache]), function () {\n    return queryClient.isMutating(filters);\n  }, function () {\n    return queryClient.isMutating(filters);\n  });\n}\n\nexport { useIsMutating };","map":{"version":3,"mappings":";;;;;;AAmBO,SAASA,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIG;EACR,4BAAgCC,uBAAuB,CAACH,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAvD;EAAA;EAAA,IAAOE,OAAP;EAAA;EAAA,IAAgBC,OAAhB,uCAA0B,EAA1B;;EAEA,IAAMC,WAAW,GAAGC,cAAc,CAAC;IAAEC,OAAO,EAAEH,OAAO,CAACG;EAAnB,CAAD,CAAlC;EACA,IAAMC,aAAa,GAAGH,WAAW,CAACI,gBAAZJ,EAAtB;EAEA,OAAOK,oBAAoB,CACzBC,KAAK,CAACC,WAAND,CACGE,uBAAD;IAAA,OACEL,aAAa,CAACM,SAAdN,CAAwBO,aAAa,CAACC,UAAdD,CAAyBF,aAAzBE,CAAxBP,CADF;EAAA,CADFG,EAGE,CAACH,aAAD,CAHFG,CADyB,EAMzB;IAAA,OAAMN,WAAW,CAACY,UAAZZ,CAAuBF,OAAvBE,CAAN;EAAA,CANyB,EAOzB;IAAA,OAAMA,WAAW,CAACY,UAAZZ,CAAuBF,OAAvBE,CAAN;EAAA,CAPyB,CAA3B;AASD","names":["useIsMutating","arg1","arg2","arg3","parseMutationFilterArgs","filters","options","queryClient","useQueryClient","context","mutationCache","getMutationCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isMutating"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\react-query\\src\\useIsMutating.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}