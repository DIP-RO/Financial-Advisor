{"ast":null,"code":"import _regeneratorRuntime from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"F:/sunshine-full-project/agustine-hotel--main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs'; // CLASS\n\nvar Mutation = /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n\n  var _super = _createSuper(Mutation);\n\n  function Mutation(config) {\n    var _this;\n\n    _classCallCheck(this, Mutation);\n\n    _this = _super.call(this);\n    _this.options = _objectSpread(_objectSpread({}, config.defaultOptions), config.options);\n    _this.mutationId = config.mutationId;\n    _this.mutationCache = config.mutationCache;\n    _this.logger = config.logger || defaultLogger;\n    _this.observers = [];\n    _this.state = config.state || getDefaultState();\n\n    _this.updateCacheTime(_this.options.cacheTime);\n\n    _this.scheduleGc();\n\n    return _this;\n  }\n\n  _createClass(Mutation, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.dispatch({\n        type: 'setState',\n        state: state\n      });\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (this.observers.indexOf(observer) === -1) {\n        this.observers.push(observer); // Stop the mutation from being garbage collected\n\n        this.clearGcTimeout();\n        this.mutationCache.notify({\n          type: 'observerAdded',\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n      this.scheduleGc();\n      this.mutationCache.notify({\n        type: 'observerRemoved',\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length) {\n        if (this.state.status === 'loading') {\n          this.scheduleGc();\n        } else {\n          this.mutationCache.remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      if (this.retryer) {\n        this.retryer.continue();\n        return this.retryer.promise;\n      }\n\n      return this.execute();\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n\n        var executeMutation, restored, _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3, _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options, context, data, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                executeMutation = function executeMutation() {\n                  var _this$options$retry;\n\n                  _this2.retryer = createRetryer({\n                    fn: function fn() {\n                      if (!_this2.options.mutationFn) {\n                        return Promise.reject('No mutationFn found');\n                      }\n\n                      return _this2.options.mutationFn(_this2.state.variables);\n                    },\n                    onFail: function onFail(failureCount, error) {\n                      _this2.dispatch({\n                        type: 'failed',\n                        failureCount: failureCount,\n                        error: error\n                      });\n                    },\n                    onPause: function onPause() {\n                      _this2.dispatch({\n                        type: 'pause'\n                      });\n                    },\n                    onContinue: function onContinue() {\n                      _this2.dispatch({\n                        type: 'continue'\n                      });\n                    },\n                    retry: (_this$options$retry = _this2.options.retry) != null ? _this$options$retry : 0,\n                    retryDelay: _this2.options.retryDelay,\n                    networkMode: _this2.options.networkMode\n                  });\n                  return _this2.retryer.promise;\n                };\n\n                restored = this.state.status === 'loading';\n                _context.prev = 2;\n\n                if (restored) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this.dispatch({\n                  type: 'loading',\n                  variables: this.options.variables\n                }); // Notify cache callback\n\n                _context.next = 7;\n                return (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n\n              case 7:\n                _context.next = 9;\n                return (_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables);\n\n              case 9:\n                context = _context.sent;\n\n                if (context !== this.state.context) {\n                  this.dispatch({\n                    type: 'loading',\n                    context: context,\n                    variables: this.state.variables\n                  });\n                }\n\n              case 11:\n                _context.next = 13;\n                return executeMutation();\n\n              case 13:\n                data = _context.sent;\n                _context.next = 16;\n                return (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n\n              case 16:\n                _context.next = 18;\n                return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context);\n\n              case 18:\n                _context.next = 20;\n                return (_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context);\n\n              case 20:\n                this.dispatch({\n                  type: 'success',\n                  data: data\n                });\n                return _context.abrupt(\"return\", data);\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](2);\n                _context.prev = 26;\n                _context.next = 29;\n                return (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, _context.t0, this.state.variables, this.state.context, this);\n\n              case 29:\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.error(_context.t0);\n                }\n\n                _context.next = 32;\n                return (_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, _context.t0, this.state.variables, this.state.context);\n\n              case 32:\n                _context.next = 34;\n                return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, _context.t0, this.state.variables, this.state.context);\n\n              case 34:\n                throw _context.t0;\n\n              case 35:\n                _context.prev = 35;\n                this.dispatch({\n                  type: 'error',\n                  error: _context.t0\n                });\n                return _context.finish(35);\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 24], [26,, 35, 38]]);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n\n      var reducer = function reducer(state) {\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              failureCount: action.failureCount,\n              failureReason: action.error\n            });\n\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: true\n            });\n\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: false\n            });\n\n          case 'loading':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              context: action.context,\n              data: undefined,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              isPaused: !canFetch(_this3.options.networkMode),\n              status: 'loading',\n              variables: action.variables\n            });\n\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              status: 'success',\n              isPaused: false\n            });\n\n          case 'error':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: undefined,\n              error: action.error,\n              failureCount: state.failureCount + 1,\n              failureReason: action.error,\n              isPaused: false,\n              status: 'error'\n            });\n\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onMutationUpdate(action);\n        });\n\n        _this3.mutationCache.notify({\n          mutation: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n\n  return Mutation;\n}(Removable);\n\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["Mutation","constructor","config","options","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","updateCacheTime","cacheTime","scheduleGc","meta","setState","dispatch","type","addObserver","observer","indexOf","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","promise","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","restored","onMutate","_this$mutationCache$c","_this$mutationCache$c2","context","data","onSuccess","_this$options$onSucce","onSettled","_this$options$onSettl","onError","process","env","NODE_ENV","_this$options$onError","_this$options$onSettl2","undefined","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate","Removable"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}