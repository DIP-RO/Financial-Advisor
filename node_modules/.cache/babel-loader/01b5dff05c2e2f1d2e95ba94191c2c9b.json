{"ast":null,"code":"import * as React from 'react';\nimport { shouldThrowError } from './utils.mjs';\n\nvar ensurePreventErrorBoundaryRetry = function ensurePreventErrorBoundaryRetry(options, errorResetBoundary) {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\n\nvar useClearResetErrorBoundary = function useClearResetErrorBoundary(errorResetBoundary) {\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\n\nvar getHasError = function getHasError(_ref) {\n  var result = _ref.result,\n      errorResetBoundary = _ref.errorResetBoundary,\n      useErrorBoundary = _ref.useErrorBoundary,\n      query = _ref.query;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);\n};\n\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"mappings":";;;IAWaA,+BAA+B,GAAG,SAAlCA,+BAAkC,CAO7CC,OAP6C,EAc7CC,kBAd6C,EAe1C;EACH,IAAID,OAAO,CAACE,QAARF,IAAoBA,OAAO,CAACG,gBAAhC,EAAkD;IAChD;IACA,IAAI,CAACF,kBAAkB,CAACG,OAAnBH,EAAL,EAAmC;MACjCD,OAAO,CAACK,YAARL,GAAuB,KAAvBA;IACD;EACF;AACF;;AAEYM,8BAA0B,GACrCL,SADWK,0BACXL,mBADwC,EAErC;EACHM,KAAK,CAACC,SAAND,CAAgB,YAAM;IACpBN,kBAAkB,CAACQ,UAAnBR;EADF,GAEG,CAACA,kBAAD,CAFHM;AAGD,CANYD;;AAQN,IAAMI,WAAW,GAAG,SAAdA,WAAc,OAqBrB;EAAA,IAdJC,MAcI,QAdJA,MAcI;EAAA,IAbJV,kBAaI,QAbJA,kBAaI;EAAA,IAZJE,gBAYI,QAZJA,gBAYI;EAAA,IAXJS,KAWI,QAXJA,KAWI;EACJ,OACED,MAAM,CAACE,OAAPF,IACA,CAACV,kBAAkB,CAACG,OAAnBH,EADDU,IAEA,CAACA,MAAM,CAACG,UAFRH,IAGAI,gBAAgB,CAACZ,gBAAD,EAAmB,CAACQ,MAAM,CAACK,KAAR,EAAeJ,KAAf,CAAnB,CAJlB;AAMD,CA5BM","names":["ensurePreventErrorBoundaryRetry","options","errorResetBoundary","suspense","useErrorBoundary","isReset","retryOnMount","useClearResetErrorBoundary","React","useEffect","clearReset","getHasError","result","query","isError","isFetching","shouldThrowError","error"],"sources":["F:\\sunshine-full-project\\agustine-hotel--main\\node_modules\\@tanstack\\react-query\\src\\errorBoundaryUtils.ts"],"sourcesContent":["import type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n"]},"metadata":{},"sourceType":"module"}